#!/usr/bin/env node
// Core node modules.
var fs = require('fs'),
    exec = require('child_process').exec,
    os = require('os'),
    url = require('url');

// NPM Packages.
var program = require('commander'),
    phantom = require('phantom'),
    resemblejs = require('resemble'),
    validator = require('validator');


program
  .version('0.0.1')
  .option('-d, --dimensions <size>', 'The dimensions to use for the viewport (default: 2550x1680) ')
  .option('-o, --output <output>', 'The directory to use to save the image files. (default: os.tmpdir())')
  .option('-p, --port <port>', 'The port to use for PhantomJS')
  .parse(process.argv);

// Check to make sure we have two paths as arguments and if not show help text and exit.
if (program.args.length !== 2) {
  console.error('Please specify two paths for comparision!');
  program.help();
  process.exit(1);
}

// Make sure the urls provided are valid.
var firstUrl = validateUrl(program.args[0]);
var secondUrl = validateUrl(program.args[1]);
if (!validator.isURL(firstUrl, { allow_underscores: true }) || !validator.isURL(secondUrl, { allow_underscores: true })) {
  console.error('Please specify two valid paths for comparison');
  process.exit(1);
}

// Make sure our output directory is writeable, or fail early.
var outputDirectory = program.output || os.tmpdir().substring(0, os.tmpdir().length - 1);
if (!fs.existsSync(outputDirectory)) {
  console.error('Please make sure %s exists and is writeable, or specify another output directory.', outputDirectory);
  process.exit(1);
}

// Make sure PhantomJS is installed correctly.
exec('which phantomjs', function(err, stdout) {
  if (err) {
    console.error("phantomjs doesn't appear to be available in your path. Please `brew install phantomjs` or the equivalent for your system.");
    process.exit(1);
  }

  // If we have two paths, and phantomjs good to go take some screenshots.
  var port = program.port || 12345;
  // We need to split the output dimensions by width and height.
  var outputDimensions = program.dimensions || '2550x1880';
  var dimensions = outputDimensions.split('x');
  var viewportWidth = dimensions[0];
  var viewportHeight = dimensions[1];

  var firstUrlImage = outputDirectory + '/' + imageFileName(firstUrl, outputDimensions);
  var secondUrlImage = outputDirectory + '/' + imageFileName(secondUrl, outputDimensions);
  var diffImagePath = outputDirectory + '/' + outputDimensions + '_diff.png';

  // Start up a phantomjs browser (ignoring ssl issues).
  phantom.create('--web-security=no', '--ignore-ssl-errors=yes', { "port": port }, function(ph) {
    console.log('PhantomJS Browser started.');

    // Create and open a page for our first url.
    ph.createPage(function(page) {
      // Set the viewport to the desired dimensions.
      page.set('viewportSize', { width: viewportWidth, height: viewportHeight }, function(status) {
        page.open(firstUrl, function(status) {
          if (status == 'success') {
            // and save the screenshot.
            page.render(firstUrlImage, function(err, status) {
              console.log(firstUrl + ' captured.');

              // Now get the image for the second site.
              page.open(secondUrl, function(status) {
                page.render(secondUrlImage, function(err, status) {
                  console.log(secondUrl + ' captured.');
                  // Close our page.
                  page.close();
                  // Exit PhantomJS
                  ph.exit();
                  // Generate our diff image with resemble.
                  resemblejs.resemble.outputSettings({
                    errorColor: {
                      red: 0,
                      green: 255,
                      blue: 255
                    },
                    errorType: 'movement',
                    transparency: 0.3
                  });

                  resemblejs.resemble(firstUrlImage).compareTo(secondUrlImage).ignoreNothing().onComplete(function(data) {
                    var diffImage = data.getImageDataUrl().replace(/^data:image\/png;base64,/,"");

                    // Write the diff file to disk.
                    fs.writeFile(diffImagePath, diffImage, 'base64', function(err) {
                      if (err) throw err;

                      console.log('Your diff has been saved to %s', diffImagePath);
                    });
                  });
                });
              });
            });
          }
        });
      });
    });
  });
});

// Take a url input, normalize it to add http:// if it's missing, since it's needed by phantomjs.
function validateUrl(path) {
  if (url.parse(path).host === null) {
    // Try adding an 'http://' to the url to see if that works.
    if (url.parse('http://' + path).host !== null) {
      path = 'http://' + path;
    }
  }

  return path;
}

// For a given url, strip the 'http://' replace any other path '/'s with
// underscores and add dimension information so we can keep breakpoints straight.
function imageFileName(fullUrl, dimensions) {
  return fullUrl.replace('http://', '').replace('/', '_') + '_' + dimensions + '.png';
}
